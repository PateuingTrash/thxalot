
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua'))()

local function showCustomLoadingScreen()
    local ScreenGui = Instance.new("ScreenGui", game.Players.LocalPlayer.PlayerGui)
    ScreenGui.Name = "CustomLoadingScreen"

    local Frame = Instance.new("Frame", ScreenGui)
    Frame.Size = UDim2.new(1, 0, 1, 0)
    Frame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)

    local Title = Instance.new("TextLabel", Frame)
    Title.Size = UDim2.new(0.8, 0, 0.2, 0)
    Title.Position = UDim2.new(0.1, 0, 0.3, 0)
    Title.Text = "[--Bey Hub--]"
    Title.Font = Enum.Font.GothamBlack
    Title.TextSize = 60 
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.BackgroundTransparency = 1

    local Subtitle = Instance.new("TextLabel", Frame)
    Subtitle.Size = UDim2.new(0.8, 0, 0.1, 0)
    Subtitle.Position = UDim2.new(0.1, 0, 0.5, 0)
    Subtitle.Text = "⚔️ A New Experience in Pixel Slayer ⚔️"
    Subtitle.Font = Enum.Font.GothamBold
    Subtitle.TextSize = 40
    Subtitle.TextColor3 = Color3.new(1, 1, 1)
    Subtitle.BackgroundTransparency = 1

    wait(3) 
    ScreenGui:Destroy()
end

showCustomLoadingScreen()

local AutoFarmEnabled = false
local AutoStatsEnabled = false
local AutoRebirthEnabled = false
local KillAuraEnabled = false
local HEIGHT_OFFSET = -15
local previousPositionY = nil
local SelectedStat = "Power"
local Hotkey = Enum.KeyCode.K 
local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemotePath = ReplicatedStorage:WaitForChild("Universe"):WaitForChild("Network"):WaitForChild("Remotes")
local lastHeight = nil
local DAMAGE_AMOUNT = 50
local KILL_AURA_RANGE = 200 
local AUTO_FARM_RANGE = 200 
local MAX_MOBS_TO_DAMAGE = 13 
local returnY = 2
local MIN_SAFE_HEALTH = 100 

local function multiDamageAllMobs()
    local mobsFolder = game.Workspace:WaitForChild("World"):WaitForChild("Mobs")
    local mobCount = 0

    local mobsToDamage = {}

    for _, mob in pairs(mobsFolder:GetChildren()) do
        local humanoid = mob:FindFirstChild("Humanoid")
        if humanoid and humanoid.Health > 0 then
            mobCount = mobCount + 1
            if mobCount > MAX_MOBS_TO_DAMAGE then break end
            table.insert(mobsToDamage, mob)
        end
    end

    for _, mob in pairs(mobsToDamage) do
        spawn(function()
            local character = game.Players.LocalPlayer.Character
            if not character then return end

            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoid or humanoid.Health <= MIN_SAFE_HEALTH then
                print("MultiDamage suspenso: Saúde baixa.")
                wait(3) 
                return
            end

            if RemotePath:FindFirstChild("DamageFire") then
                local args = {
                    [1] = mob,
                    [2] = DAMAGE_AMOUNT
                }
                for i = 1, 3 do
                    RemotePath.DamageFire:FireServer(unpack(args))
                end
            else
                warn("Remote 'DamageFire' não encontrada!")
            end
        end)
    end
end

local function isMobAlive(mob)
    return mob and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0
end

local function selectStat(stat)
    SelectedStat = stat
end

local function runAutoStats()
    spawn(function()
        local statMapping = {
            Power = { [1] = 1, [2] = 0, [3] = 0 },
            Health = { [1] = 0, [2] = 1, [3] = 0 },
            Critical = { [1] = 0, [2] = 0, [3] = 1 }
        }

        local upgradeStat = RemotePath:FindFirstChild("UpgradeStat")
        if not upgradeStat then
            warn("UpgradeStat Remote not found!")
            return
        end

        while AutoStatsEnabled do
            local args = statMapping[SelectedStat]
            
            if args then
                upgradeStat:FireServer(unpack(args))
            end

            wait(0.1) 
        end
    end)
end
local function runAutoRebirth()
    spawn(function()
        while AutoRebirthEnabled do
            local rebirthRemote = RemotePath:FindFirstChild("Rebirth")
            if rebirthRemote then
                rebirthRemote:FireServer()
            end
            wait(0.1)
        end
    end)
end

local function AutoFarm()
    spawn(function()
        while AutoFarmEnabled do
            local character = game.Players.LocalPlayer.Character
            if not character then continue end

            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoidRootPart or not humanoid then continue end

            if humanoid.Health <= MIN_SAFE_HEALTH then
                print("AutoFarm suspenso: Saúde baixa.")
                wait(3) -- Tempo suspenso
                continue
            end

            local mobsFolder = game.Workspace:WaitForChild("World"):WaitForChild("Mobs")
            local mobFound = false

            for _, mob in pairs(mobsFolder:GetChildren()) do
                if mob and mob:FindFirstChild("HumanoidRootPart") and isMobAlive(mob) then
                    local adjustedPlayerPosition = Vector3.new(
                        humanoidRootPart.Position.X,
                        humanoidRootPart.Position.Y - HEIGHT_OFFSET, 
                        humanoidRootPart.Position.Z
                    )
                    local distance = (mob.HumanoidRootPart.Position - adjustedPlayerPosition).Magnitude

                    if distance <= AUTO_FARM_RANGE then
                        mobFound = true
                        local targetCFrame = CFrame.new(
                            mob.HumanoidRootPart.Position + Vector3.new(0, HEIGHT_OFFSET, 0)
                        )

                        local tween = TweenService:Create(
                            humanoidRootPart,
                            TweenInfo.new(0.1, Enum.EasingStyle.Linear),
                            {CFrame = targetCFrame}
                        )

                        tween:Play()
                        tween.Completed:Wait()

                        humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                        humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)

                        multiDamageAllMobs()
                        break
                    end
                end
            end

            if not mobFound then
                wait(5)
            else
                wait(0.1)
            end
        end
    end)
end

local function runKillAura()
    local cooldowns = {}

    spawn(function()
        while KillAuraEnabled do
            local character = game.Players.LocalPlayer.Character
            if not character then continue end

            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoidRootPart or not humanoid then continue end

            if humanoid.Health <= MIN_SAFE_HEALTH then
                print("Kill Aura suspensa: Saúde baixa.")
                wait(3) 
                continue
            end

            local mobsFolder = game.Workspace:WaitForChild("World"):WaitForChild("Mobs")

            for _, mob in pairs(mobsFolder:GetChildren()) do
                if mob and mob:FindFirstChild("HumanoidRootPart") and isMobAlive(mob) then
                    local mobPosition = mob.HumanoidRootPart.Position
                    local playerPosition = humanoidRootPart.Position
                    local distance = (mobPosition - playerPosition).Magnitude

                    if distance <= KILL_AURA_RANGE and not cooldowns[mob] then
                        cooldowns[mob] = true
                        spawn(function()
                            local args = {
                                [1] = mob,
                                [2] = DAMAGE_AMOUNT
                            }

                            local damageRemote = RemotePath:FindFirstChild("DamageFire")
                            if damageRemote then
                                damageRemote:FireServer(unpack(args))
                            else
                                warn("Remote 'DamageFire' not found!")
                            end

                            wait(1) 
                            cooldowns[mob] = nil
                        end)
                    end
                end
            end
            wait(0.1) 
        end
    end)
end   

local function getCurrentWorld()
    -- Supondo que o índice do mundo possa ser identificado pela estrutura de 'Worlds'
    return 1  -- Retorne o número do mundo atual conforme sua lógica.
end

-- Função para verificar a posição da seção e parar o Auto-Farm
local function stopAutoFarmIfAtFinalSection()
    print("Verificando a posição do jogador na Dungeon...")

    -- Obter o mundo atual e a seção da Dungeon
    local worldIndex = getCurrentWorld()  -- Utiliza a função que já foi definida
    local sectionPositionPath = "Worlds[" .. tostring(worldIndex) .. "].Dungeon.SectionPosition"

    -- Verifique se a estrutura existe
    local sectionPosition = game.Workspace:FindFirstChild("World") and game.Workspace.World:FindFirstChild("Worlds")
        and game.Workspace.World.Worlds[tostring(worldIndex)] and game.Workspace.World.Worlds[tostring(worldIndex)].Dungeon:FindFirstChild("SectionPosition")

    if sectionPosition then
        print("Seção encontrada na posição: " .. tostring(sectionPosition.Position))

        -- Verifica a posição do jogador para determinar se ele está na seção final da Dungeon
        local character = game.Players.LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local playerPosition = character.HumanoidRootPart.Position
            local distanceToSection = (playerPosition - sectionPosition.Position).Magnitude

            print("Distância do jogador para a seção final: " .. distanceToSection)

            -- Se o jogador estiver próximo da posição final, pare o Auto-Farm
            if distanceToSection < 10 then
                print("Jogador na seção final. Parando o Auto-Farm.")
                AutoFarmEnabled = false  -- Desliga o Auto-Farm
            else
                print("Jogador não está na seção final. Continuando o Auto-Farm.")
            end
        else
            print("HumanoidRootPart não encontrado!")
        end
    else
        print("Seção não encontrada no caminho: " .. sectionPositionPath)
    end
end

local function returnToInitialY()
    local character = game.Players.LocalPlayer.Character
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if humanoidRootPart then
        local targetPosition = Vector3.new(humanoidRootPart.Position.X, returnY, humanoidRootPart.Position.Z)
        local targetCFrame = CFrame.new(targetPosition)

        -- Criando o Tween para retorno suave
        local tween = TweenService:Create(
            humanoidRootPart,
            TweenInfo.new(0.5, Enum.EasingStyle.Linear), -- Defina o tempo conforme necessário (0.5s é um exemplo)
            {CFrame = targetCFrame}
        )

        tween:Play()
        tween.Completed:Wait()

        print("Retornando para a posição Y =", returnY)
    else
        print("HumanoidRootPart não encontrado ao retornar!")
    end
end
local Window = Rayfield:CreateWindow({
    Name = "Bey Hub - Pixel Slayer ⚔️",
    LoadingTitle = "[--Bey Hub--]",
    LoadingSubtitle = "⚔️ A New Experience in Pixel Slayer ⚔️",
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "FarmConfig",
        FileName = "Config"
    }
})

local MainTab = Window:CreateTab("Main", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362459) 

MainTab:CreateSlider({
    Name = " ⬆ Height Offset ⬇",
    Range = {-20, 20},  
    Increment = 1,
    Suffix = "Studs",
    CurrentValue = -15,  
    Flag = "HeightOffset",
    Callback = function(Value)
        HEIGHT_OFFSET = Value
    end,
    ShowValue = false
})

MainTab:CreateToggle({
    Name = "Auto Farm ⏳",
    CurrentValue = false,
    Flag = "AutoFarmToggle",
    Callback = function(Value)
        AutoFarmEnabled = Value
        local character = game.Players.LocalPlayer.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                if Value then
                    -- Ativa o AutoFarm, ajustando a altura Y com base em HEIGHT_OFFSET
                    humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position.X, HEIGHT_OFFSET, humanoidRootPart.Position.Z)
                    AutoFarm()
                else
                    -- Desliga o AutoFarm e retorna para a posição inicial no eixo Y com um Tween suave
                    returnToInitialY()
                    AutoFarmEnabled = false
                end
            else
                print("HumanoidRootPart não encontrado!")
            end
        else
            print("Personagem não encontrado!")
        end
    end
})
MainTab:CreateToggle({
    Name = "Kill Aura ☠️",
    CurrentValue = false,
    Flag = "KillAuraToggle",
    Callback = function(Value)
        KillAuraEnabled = Value
        if Value then
            runKillAura()
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto Stats (Only Power) ⚡",
    CurrentValue = false,
    Flag = "AutoStatsToggle",
    Callback = function(Value)
        AutoStatsEnabled = Value
        if Value then
            runAutoStats()
        end
    end
})

MainTab:CreateToggle({
    Name = "Auto Rebirth ♻️",
    CurrentValue = false,
    Flag = "AutoRebirthToggle",
    Callback = function(Value)
        AutoRebirthEnabled = Value
        if Value then
            runAutoRebirth()
        end
    end
})

SettingsTab:CreateDropdown({
    Name = "Select Hotkey for Menu 🧑‍💻",
    Options = {"K", "L", "M", "N", "O"},
    CurrentOption = "K", 
    Flag = "HotkeySelection",
    Callback = function(Option)
        Hotkey = Enum.KeyCode[Option]
    end
})

Rayfield:Notify({
    Title = "Thank You for Playing!",
    Content = "This script was made by zBeyond. Enjoy the game and have fun!",
    Duration = 7
})
Rayfield:Notify({
    Title = "⚙️ UPD v0.02 ⚙️",
    Content = "🛠️ Crash fixed. 🛠️",
    Duration = 9
})
